// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package account

import (
	"context"

	"github.com/leandrodam/transactions/internal/domain/account"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, account1 account.Account) (account.Account, error) {
	ret := _mock.Called(ctx, account1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 account.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.Account) (account.Account, error)); ok {
		return returnFunc(ctx, account1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, account.Account) account.Account); ok {
		r0 = returnFunc(ctx, account1)
	} else {
		r0 = ret.Get(0).(account.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, account.Account) error); ok {
		r1 = returnFunc(ctx, account1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - account1 account.Account
func (_e *MockRepository_Expecter) Create(ctx interface{}, account1 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, account1)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, account1 account.Account)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 account.Account
		if args[1] != nil {
			arg1 = args[1].(account.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(account11 account.Account, err error) *MockRepository_Create_Call {
	_c.Call.Return(account11, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, account1 account.Account) (account.Account, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetByID(ctx context.Context, id int) (account.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 account.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (account.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) account.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(account.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(account1 account.Account, err error) *MockRepository_GetByID_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (account.Account, error)) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}
